generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["main_auth", "phones", "support"]
}

// ========================
// SCHEMA: main_auth (igual que antes, no lo toco)
// ========================

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
  @@schema("main_auth")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
  @@schema("main_auth")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
  @@schema("main_auth")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
  @@schema("main_auth")
}

// ========================
// SCHEMA: phones
// ========================

enum device_status {
  IN_STOCK
  ASSIGNED
  SOLD
  RETURNED
  DAMAGED
  LOST

  @@schema("phones")
}

model phone_model {
  id         String   @id @default(cuid())
  brand      String
  model      String
  storage_gb Int?
  color      String?  @default("")

  sku        String?
  devices    device[]

  @@unique([brand, model, storage_gb, color])
  @@map("phone_model")
  @@schema("phones")
}

model distributor {
  id        String      @id @default(cuid())
  name      String      @unique
  devices   device[]
  purchases purchase[]

  @@map("distributor")
  @@schema("phones")
}

model purchase {
  id             String      @id @default(cuid())
  distributor_id String
  distributor    distributor @relation(fields: [distributor_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  purchased_at   DateTime    @default(now())
  currency       String      @default("ARS")
  invoice_number String?

  devices device[]

  @@index([distributor_id])
  @@map("purchase")
  @@schema("phones")
}

model device {
  id             String       @id @default(cuid())
  imei           String       @unique
  model_id       String
  model          phone_model  @relation(fields: [model_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  distributor_id String?
  distributor    distributor? @relation(fields: [distributor_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  purchase_id String?
  purchase    purchase? @relation(fields: [purchase_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  status device_status @default(IN_STOCK)

  assigned_to String?
  ticket_id   String?

  assignments assignment[]
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt

  @@index([model_id])
  @@index([status])
  @@index([assigned_to])
  @@index([ticket_id])
  @@map("device")
  @@schema("phones")
}

model assignment {
  id          String  @id @default(cuid())
  device_id   String
  device      device  @relation(fields: [device_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  type        assignment_type
  assigned_to String?
  ticket_id   String?
  at          DateTime @default(now())

  @@index([device_id, at])
  @@map("assignment")
  @@schema("phones")
}

enum assignment_type {
  ASSIGN
  UNASSIGN

  @@schema("support")
}

// ========================
// NUEVOS MODELOS: incidents y procedures
// ========================

model incident {
  id          String       @id @default(cuid())
  name        String
  type        String
  description String?
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt

  // relación a procedimientos
  procedures incident_procedure[]

  @@map("incident")
  @@schema("support")
}

model procedure {
  id          String       @id @default(cuid())
  title       String
  content     String       // descripción detallada o pasos
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt

  incidents incident_procedure[]

  @@map("procedure")
  @@schema("support")
}

// tabla pivot para relación M:N
model incident_procedure {
  incident_id  String
  procedure_id String
  incident     incident  @relation(fields: [incident_id], references: [id], onDelete: Cascade)
  procedure    procedure @relation(fields: [procedure_id], references: [id], onDelete: Cascade)

  @@id([incident_id, procedure_id])
  @@map("incident_procedure")
  @@schema("support")
}
